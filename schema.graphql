type VaultPricePerShare @entity(immutable: true) {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  vault: String!
  pricePerShare: BigInt!
}

type VaultPpsLastTimestamp @entity {
  id: ID!
  timestamp: BigInt!
}

type VaultTVL @entity(immutable: true) {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  vault: String!
  tvl: BigInt!
}

type VaultFeesCollection @entity(immutable: true) {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  vault: String!
  performanceFees: BigInt!
  managementFees: BigInt!
  totalFees: BigInt!
}

type UserVaultBalanceTotal @entity {
  id: ID!
  usdc: BigInt!
  weth: BigInt!
  wbtc: BigInt!
  link: BigInt!
  uni: BigInt!
}

type UserVaultBalance @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  txHash: String!
  event: String!
  value: BigInt!
  user: String!
  vault: String!
}

type RebalanceSnapshot @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  txHash: String!
  event: String!
  glpPrice: BigInt!
  vaultsTVL: [BigInt!]!
  vaultsPps: [BigInt!]!
  vaultsGlpAlloc: [BigInt!]!
  aggregatePositions: [BigInt!]!
  usdcVaultExposures: [BigInt!]!
  wethVaultExposures: [BigInt!]!
  wbtcVaultExposures: [BigInt!]!
  linkVaultExposures: [BigInt!]!
  uniVaultExposures: [BigInt!]!
  usdcVaultInternalNetting: [BigInt!]!
  wethVaultInternalNetting: [BigInt!]!
  wbtcVaultInternalNetting: [BigInt!]!
  linkVaultInternalNetting: [BigInt!]!
  uniVaultInternalNetting: [BigInt!]!
  glpComposition: [BigInt!]!
  assetsPrices: [BigInt!]!
}

type CloseRebalance @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
}

type CollectVaultFees @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
  totalVaultFee: BigInt! # uint256
  performanceFeeInAsset: BigInt! # uint256
  managementFeeInAsset: BigInt! # uint256
  slowReleaseMintAmount: BigInt! # uint256
  _assetVault: Bytes! # address
}

type CompoundDistributeYield @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
  glpYieldPerVault: [BigInt!]! # uint256[5]
}

type Cycle @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
  round: BigInt! # uint256
}

type OpenRebalance @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
  nextVaultGlpAlloc: [BigInt!]! # uint256[5]
  nextGlpComp: [BigInt!]! # uint256[5]
  adjustedPositions: [BigInt!]! # int256[5]
}

type RebalanceGlpPosition @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
  vaultGlpAttributionBefore: [BigInt!]! # uint256[5]
  vaultGlpAttributionAfter: [BigInt!]! # uint256[5]
  targetGlpAllocation: [BigInt!]! # uint256[5]
  vaultGlpDeltaToExecute: [BigInt!]! # int256[5]
  totalVaultGlpDelta: [BigInt!]! # int256[5]
}

type SettleNettedPositionPnl @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
  previousGlpAmount: [BigInt!]! # uint256[5]
  settledGlpAmount: [BigInt!]! # uint256[5]
  glpPnl: [BigInt!]! # int256[5]
  dollarPnl: [BigInt!]! # int256[5]
  percentPriceChange: [BigInt!]! # int256[5]
}

type UpdateNettingCheckpointPrice @entity(immutable: true) {
  id: ID!
  timestamp: BigInt! # uint256
  block: BigInt! # uint256
  epoch: BigInt! # uint256
  oldPrices_stable: BigInt! # uint256
  oldPrices_eth: BigInt! # uint256
  oldPrices_btc: BigInt! # uint256
  oldPrices_link: BigInt! # uint256
  oldPrices_uni: BigInt! # uint256
  newPrices_stable: BigInt! # uint256
  newPrices_eth: BigInt! # uint256
  newPrices_btc: BigInt! # uint256
  newPrices_link: BigInt! # uint256
  newPrices_uni: BigInt! # uint256
}
