// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CloseRebalance extends ethereum.Event {
  get params(): CloseRebalance__Params {
    return new CloseRebalance__Params(this);
  }
}

export class CloseRebalance__Params {
  _event: CloseRebalance;

  constructor(event: CloseRebalance) {
    this._event = event;
  }

  get _timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CollectVaultFees extends ethereum.Event {
  get params(): CollectVaultFees__Params {
    return new CollectVaultFees__Params(this);
  }
}

export class CollectVaultFees__Params {
  _event: CollectVaultFees;

  constructor(event: CollectVaultFees) {
    this._event = event;
  }

  get totalVaultFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get performanceFeeInAsset(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get managementFeeInAsset(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get slowReleaseMintAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _assetVault(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class CompoundDistributeYield extends ethereum.Event {
  get params(): CompoundDistributeYield__Params {
    return new CompoundDistributeYield__Params(this);
  }
}

export class CompoundDistributeYield__Params {
  _event: CompoundDistributeYield;

  constructor(event: CompoundDistributeYield) {
    this._event = event;
  }

  get glpYieldPerVault(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class Cycle extends ethereum.Event {
  get params(): Cycle__Params {
    return new Cycle__Params(this);
  }
}

export class Cycle__Params {
  _event: Cycle;

  constructor(event: Cycle) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenRebalance extends ethereum.Event {
  get params(): OpenRebalance__Params {
    return new OpenRebalance__Params(this);
  }
}

export class OpenRebalance__Params {
  _event: OpenRebalance;

  constructor(event: OpenRebalance) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nextVaultGlpAlloc(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get nextGlpComp(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get adjustedPositions(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class RebalanceGlpPosition extends ethereum.Event {
  get params(): RebalanceGlpPosition__Params {
    return new RebalanceGlpPosition__Params(this);
  }
}

export class RebalanceGlpPosition__Params {
  _event: RebalanceGlpPosition;

  constructor(event: RebalanceGlpPosition) {
    this._event = event;
  }

  get vaultGlpAttributionBefore(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get vaultGlpAttributionAfter(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get targetGlpAllocation(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get vaultGlpDeltaToExecute(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get totalVaultGlpDelta(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class SettleNettedPositionPnl extends ethereum.Event {
  get params(): SettleNettedPositionPnl__Params {
    return new SettleNettedPositionPnl__Params(this);
  }
}

export class SettleNettedPositionPnl__Params {
  _event: SettleNettedPositionPnl;

  constructor(event: SettleNettedPositionPnl) {
    this._event = event;
  }

  get previousGlpAmount(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get settledGlpAmount(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get glpPnl(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get dollarPnl(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get percentPriceChange(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class UpdateNettingCheckpointPrice extends ethereum.Event {
  get params(): UpdateNettingCheckpointPrice__Params {
    return new UpdateNettingCheckpointPrice__Params(this);
  }
}

export class UpdateNettingCheckpointPrice__Params {
  _event: UpdateNettingCheckpointPrice;

  constructor(event: UpdateNettingCheckpointPrice) {
    this._event = event;
  }

  get oldPrices(): UpdateNettingCheckpointPriceOldPricesStruct {
    return changetype<UpdateNettingCheckpointPriceOldPricesStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get newPrices(): UpdateNettingCheckpointPriceNewPricesStruct {
    return changetype<UpdateNettingCheckpointPriceNewPricesStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class UpdateNettingCheckpointPriceOldPricesStruct extends ethereum.Tuple {
  get stable(): BigInt {
    return this[0].toBigInt();
  }

  get eth(): BigInt {
    return this[1].toBigInt();
  }

  get btc(): BigInt {
    return this[2].toBigInt();
  }

  get link(): BigInt {
    return this[3].toBigInt();
  }

  get uni(): BigInt {
    return this[4].toBigInt();
  }
}

export class UpdateNettingCheckpointPriceNewPricesStruct extends ethereum.Tuple {
  get stable(): BigInt {
    return this[0].toBigInt();
  }

  get eth(): BigInt {
    return this[1].toBigInt();
  }

  get btc(): BigInt {
    return this[2].toBigInt();
  }

  get link(): BigInt {
    return this[3].toBigInt();
  }

  get uni(): BigInt {
    return this[4].toBigInt();
  }
}

export class AggregateVaultHelper___getCurrentPricesResult_pricesStruct extends ethereum.Tuple {
  get stable(): BigInt {
    return this[0].toBigInt();
  }

  get eth(): BigInt {
    return this[1].toBigInt();
  }

  get btc(): BigInt {
    return this[2].toBigInt();
  }

  get link(): BigInt {
    return this[3].toBigInt();
  }

  get uni(): BigInt {
    return this[4].toBigInt();
  }
}

export class AggregateVaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get feeWatermarkPPS(): BigInt {
    return this[2].toBigInt();
  }

  get feeWatermarkDate(): BigInt {
    return this[3].toBigInt();
  }

  get epochDelta(): BigInt {
    return this[4].toBigInt();
  }

  get lastCheckpointTvl(): BigInt {
    return this[5].toBigInt();
  }

  get slowReleaseStaking(): Address {
    return this[6].toAddress();
  }
}

export class AggregateVaultHelper__getLastNettedPriceResult_nettedPricesStruct extends ethereum.Tuple {
  get stable(): BigInt {
    return this[0].toBigInt();
  }

  get eth(): BigInt {
    return this[1].toBigInt();
  }

  get btc(): BigInt {
    return this[2].toBigInt();
  }

  get link(): BigInt {
    return this[3].toBigInt();
  }

  get uni(): BigInt {
    return this[4].toBigInt();
  }
}

export class AggregateVaultHelper__getRebalanceStateResult_rebalanceStateStruct extends ethereum.Tuple {
  get glpAllocation(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get glpComposition(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get externalPositions(): Array<Array<BigInt>> {
    return this[2].toBigIntMatrix();
  }

  get aggregatePositions(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[4].toBigInt();
  }

  get adjustedExternalPositions(): Array<Array<BigInt>> {
    return this[5].toBigIntMatrix();
  }
}

export class AggregateVaultHelper__getVaultFromAssetResultVaultStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get feeWatermarkPPS(): BigInt {
    return this[2].toBigInt();
  }

  get feeWatermarkDate(): BigInt {
    return this[3].toBigInt();
  }

  get epochDelta(): BigInt {
    return this[4].toBigInt();
  }

  get lastCheckpointTvl(): BigInt {
    return this[5].toBigInt();
  }

  get slowReleaseStaking(): Address {
    return this[6].toAddress();
  }
}

export class AggregateVaultHelper__getVaultStateResult_vaultStateStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get rebalanceOpen(): boolean {
    return this[1].toBoolean();
  }

  get glpAllocation(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get aggregatePositions(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get externalPositions(): Array<Array<BigInt>> {
    return this[4].toBigIntMatrix();
  }

  get feeRecipient(): Address {
    return this[5].toAddress();
  }
}

export class AggregateVaultHelper__getVaultTVLBreakdownResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_total(): BigInt {
    return this.value0;
  }

  get_buffer(): BigInt {
    return this.value1;
  }

  get_glp(): BigInt {
    return this.value2;
  }

  get_hedges(): BigInt {
    return this.value3;
  }
}

export class AggregateVaultHelper__getWithdrawalRequestRecieptsResult_withdrawalRequestRecieptsStruct extends ethereum.Tuple {
  get assetVault(): Address {
    return this[0].toAddress();
  }

  get asset(): Address {
    return this[1].toAddress();
  }

  get user(): Address {
    return this[2].toAddress();
  }

  get tokenAmount(): BigInt {
    return this[3].toBigInt();
  }

  get underlyingAmount(): BigInt {
    return this[4].toBigInt();
  }
}

export class AggregateVaultHelper extends ethereum.SmartContract {
  static bind(address: Address): AggregateVaultHelper {
    return new AggregateVaultHelper("AggregateVaultHelper", address);
  }

  STORAGE_SLOT(): Bytes {
    let result = super.call("STORAGE_SLOT", "STORAGE_SLOT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_STORAGE_SLOT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("STORAGE_SLOT", "STORAGE_SLOT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _getAllAssetVaultsHedgeAtribution(): Array<Array<BigInt>> {
    let result = super.call(
      "_getAllAssetVaultsHedgeAtribution",
      "_getAllAssetVaultsHedgeAtribution():(uint256[4][5])",
      []
    );

    return result[0].toBigIntMatrix();
  }

  try__getAllAssetVaultsHedgeAtribution(): ethereum.CallResult<
    Array<Array<BigInt>>
  > {
    let result = super.tryCall(
      "_getAllAssetVaultsHedgeAtribution",
      "_getAllAssetVaultsHedgeAtribution():(uint256[4][5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntMatrix());
  }

  _getCurrentPrices(): AggregateVaultHelper___getCurrentPricesResult_pricesStruct {
    let result = super.call(
      "_getCurrentPrices",
      "_getCurrentPrices():((uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<
      AggregateVaultHelper___getCurrentPricesResult_pricesStruct
    >(result[0].toTuple());
  }

  try__getCurrentPrices(): ethereum.CallResult<
    AggregateVaultHelper___getCurrentPricesResult_pricesStruct
  > {
    let result = super.tryCall(
      "_getCurrentPrices",
      "_getCurrentPrices():((uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AggregateVaultHelper___getCurrentPricesResult_pricesStruct>(
        value[0].toTuple()
      )
    );
  }

  callbackSigs(): Array<Bytes> {
    let result = super.call("callbackSigs", "callbackSigs():(bytes4[])", []);

    return result[0].toBytesArray();
  }

  try_callbackSigs(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("callbackSigs", "callbackSigs():(bytes4[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getActiveAggregatePositions(): Array<BigInt> {
    let result = super.call(
      "getActiveAggregatePositions",
      "getActiveAggregatePositions():(int256[4])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getActiveAggregatePositions(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getActiveAggregatePositions",
      "getActiveAggregatePositions():(int256[4])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getActiveExternalPositions(): Array<Array<BigInt>> {
    let result = super.call(
      "getActiveExternalPositions",
      "getActiveExternalPositions():(int256[5][5])",
      []
    );

    return result[0].toBigIntMatrix();
  }

  try_getActiveExternalPositions(): ethereum.CallResult<Array<Array<BigInt>>> {
    let result = super.tryCall(
      "getActiveExternalPositions",
      "getActiveExternalPositions():(int256[5][5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntMatrix());
  }

  getAssetVaultEntries(): Array<
    AggregateVaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct
  > {
    let result = super.call(
      "getAssetVaultEntries",
      "getAssetVaultEntries():((address,address,uint256,uint256,int256,uint256,address)[5])",
      []
    );

    return result[0].toTupleArray<
      AggregateVaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct
    >();
  }

  try_getAssetVaultEntries(): ethereum.CallResult<
    Array<
      AggregateVaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct
    >
  > {
    let result = super.tryCall(
      "getAssetVaultEntries",
      "getAssetVaultEntries():((address,address,uint256,uint256,int256,uint256,address)[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        AggregateVaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct
      >()
    );
  }

  getLastGlpComposition(): Array<BigInt> {
    let result = super.call(
      "getLastGlpComposition",
      "getLastGlpComposition():(uint256[5])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getLastGlpComposition(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getLastGlpComposition",
      "getLastGlpComposition():(uint256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLastNettedPrice(
    _epoch: BigInt
  ): AggregateVaultHelper__getLastNettedPriceResult_nettedPricesStruct {
    let result = super.call(
      "getLastNettedPrice",
      "getLastNettedPrice(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_epoch)]
    );

    return changetype<
      AggregateVaultHelper__getLastNettedPriceResult_nettedPricesStruct
    >(result[0].toTuple());
  }

  try_getLastNettedPrice(
    _epoch: BigInt
  ): ethereum.CallResult<
    AggregateVaultHelper__getLastNettedPriceResult_nettedPricesStruct
  > {
    let result = super.tryCall(
      "getLastNettedPrice",
      "getLastNettedPrice(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        AggregateVaultHelper__getLastNettedPriceResult_nettedPricesStruct
      >(value[0].toTuple())
    );
  }

  getNettedPositions(): Array<Array<BigInt>> {
    let result = super.call(
      "getNettedPositions",
      "getNettedPositions():(int256[5][5])",
      []
    );

    return result[0].toBigIntMatrix();
  }

  try_getNettedPositions(): ethereum.CallResult<Array<Array<BigInt>>> {
    let result = super.tryCall(
      "getNettedPositions",
      "getNettedPositions():(int256[5][5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntMatrix());
  }

  getPositionManagers(): Array<Address> {
    let result = super.call(
      "getPositionManagers",
      "getPositionManagers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getPositionManagers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPositionManagers",
      "getPositionManagers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRebalanceState(): AggregateVaultHelper__getRebalanceStateResult_rebalanceStateStruct {
    let result = super.call(
      "getRebalanceState",
      "getRebalanceState():((uint256[5],uint256[5],int256[5][5],int256[5],uint256,int256[5][5]))",
      []
    );

    return changetype<
      AggregateVaultHelper__getRebalanceStateResult_rebalanceStateStruct
    >(result[0].toTuple());
  }

  try_getRebalanceState(): ethereum.CallResult<
    AggregateVaultHelper__getRebalanceStateResult_rebalanceStateStruct
  > {
    let result = super.tryCall(
      "getRebalanceState",
      "getRebalanceState():((uint256[5],uint256[5],int256[5][5],int256[5],uint256,int256[5][5]))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        AggregateVaultHelper__getRebalanceStateResult_rebalanceStateStruct
      >(value[0].toTuple())
    );
  }

  getSwapFees(): Array<BigInt> {
    let result = super.call("getSwapFees", "getSwapFees():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getSwapFees(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getSwapFees", "getSwapFees():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getVaultFromAsset(
    _asset: Address
  ): AggregateVaultHelper__getVaultFromAssetResultVaultStruct {
    let result = super.call(
      "getVaultFromAsset",
      "getVaultFromAsset(address):((address,address,uint256,uint256,int256,uint256,address))",
      [ethereum.Value.fromAddress(_asset)]
    );

    return changetype<AggregateVaultHelper__getVaultFromAssetResultVaultStruct>(
      result[0].toTuple()
    );
  }

  try_getVaultFromAsset(
    _asset: Address
  ): ethereum.CallResult<
    AggregateVaultHelper__getVaultFromAssetResultVaultStruct
  > {
    let result = super.tryCall(
      "getVaultFromAsset",
      "getVaultFromAsset(address):((address,address,uint256,uint256,int256,uint256,address))",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AggregateVaultHelper__getVaultFromAssetResultVaultStruct>(
        value[0].toTuple()
      )
    );
  }

  getVaultGlpAttribution(): Array<BigInt> {
    let result = super.call(
      "getVaultGlpAttribution",
      "getVaultGlpAttribution():(uint256[5])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getVaultGlpAttribution(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getVaultGlpAttribution",
      "getVaultGlpAttribution():(uint256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getVaultPPS(_assetVault: Address): BigInt {
    let result = super.call("getVaultPPS", "getVaultPPS(address):(uint256)", [
      ethereum.Value.fromAddress(_assetVault)
    ]);

    return result[0].toBigInt();
  }

  try_getVaultPPS(_assetVault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultPPS",
      "getVaultPPS(address):(uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultState(): AggregateVaultHelper__getVaultStateResult_vaultStateStruct {
    let result = super.call(
      "getVaultState",
      "getVaultState():((uint256,bool,uint256[5],int256[5],int256[5][5],address))",
      []
    );

    return changetype<
      AggregateVaultHelper__getVaultStateResult_vaultStateStruct
    >(result[0].toTuple());
  }

  try_getVaultState(): ethereum.CallResult<
    AggregateVaultHelper__getVaultStateResult_vaultStateStruct
  > {
    let result = super.tryCall(
      "getVaultState",
      "getVaultState():((uint256,bool,uint256[5],int256[5],int256[5][5],address))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AggregateVaultHelper__getVaultStateResult_vaultStateStruct>(
        value[0].toTuple()
      )
    );
  }

  getVaultTVL(_assetVault: Address): BigInt {
    let result = super.call("getVaultTVL", "getVaultTVL(address):(uint256)", [
      ethereum.Value.fromAddress(_assetVault)
    ]);

    return result[0].toBigInt();
  }

  try_getVaultTVL(_assetVault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultTVL",
      "getVaultTVL(address):(uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultTVLBreakdown(
    _assetVault: Address
  ): AggregateVaultHelper__getVaultTVLBreakdownResult {
    let result = super.call(
      "getVaultTVLBreakdown",
      "getVaultTVLBreakdown(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );

    return new AggregateVaultHelper__getVaultTVLBreakdownResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getVaultTVLBreakdown(
    _assetVault: Address
  ): ethereum.CallResult<AggregateVaultHelper__getVaultTVLBreakdownResult> {
    let result = super.tryCall(
      "getVaultTVLBreakdown",
      "getVaultTVLBreakdown(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregateVaultHelper__getVaultTVLBreakdownResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getVaultsGlp(): Array<BigInt> {
    let result = super.call("getVaultsGlp", "getVaultsGlp():(uint256[5])", []);

    return result[0].toBigIntArray();
  }

  try_getVaultsGlp(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getVaultsGlp",
      "getVaultsGlp():(uint256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getWithdrawalRequestReciepts(): Array<
    AggregateVaultHelper__getWithdrawalRequestRecieptsResult_withdrawalRequestRecieptsStruct
  > {
    let result = super.call(
      "getWithdrawalRequestReciepts",
      "getWithdrawalRequestReciepts():((address,address,address,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      AggregateVaultHelper__getWithdrawalRequestRecieptsResult_withdrawalRequestRecieptsStruct
    >();
  }

  try_getWithdrawalRequestReciepts(): ethereum.CallResult<
    Array<
      AggregateVaultHelper__getWithdrawalRequestRecieptsResult_withdrawalRequestRecieptsStruct
    >
  > {
    let result = super.tryCall(
      "getWithdrawalRequestReciepts",
      "getWithdrawalRequestReciepts():((address,address,address,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        AggregateVaultHelper__getWithdrawalRequestRecieptsResult_withdrawalRequestRecieptsStruct
      >()
    );
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenToAssetVaultIndex(_token: Address): BigInt {
    let result = super.call(
      "tokenToAssetVaultIndex",
      "tokenToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_tokenToAssetVaultIndex(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToAssetVaultIndex",
      "tokenToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultToAssetVaultIndex(_vault: Address): BigInt {
    let result = super.call(
      "vaultToAssetVaultIndex",
      "vaultToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_vault)]
    );

    return result[0].toBigInt();
  }

  try_vaultToAssetVaultIndex(_vault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultToAssetVaultIndex",
      "vaultToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_vault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class _getAllAssetVaultsHedgeAtributionCall extends ethereum.Call {
  get inputs(): _getAllAssetVaultsHedgeAtributionCall__Inputs {
    return new _getAllAssetVaultsHedgeAtributionCall__Inputs(this);
  }

  get outputs(): _getAllAssetVaultsHedgeAtributionCall__Outputs {
    return new _getAllAssetVaultsHedgeAtributionCall__Outputs(this);
  }
}

export class _getAllAssetVaultsHedgeAtributionCall__Inputs {
  _call: _getAllAssetVaultsHedgeAtributionCall;

  constructor(call: _getAllAssetVaultsHedgeAtributionCall) {
    this._call = call;
  }
}

export class _getAllAssetVaultsHedgeAtributionCall__Outputs {
  _call: _getAllAssetVaultsHedgeAtributionCall;

  constructor(call: _getAllAssetVaultsHedgeAtributionCall) {
    this._call = call;
  }

  get hedgeAttribution(): Array<Array<BigInt>> {
    return this._call.outputValues[0].value.toBigIntMatrix();
  }
}

export class CycleCall extends ethereum.Call {
  get inputs(): CycleCall__Inputs {
    return new CycleCall__Inputs(this);
  }

  get outputs(): CycleCall__Outputs {
    return new CycleCall__Outputs(this);
  }
}

export class CycleCall__Inputs {
  _call: CycleCall;

  constructor(call: CycleCall) {
    this._call = call;
  }

  get assetPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CycleCall__Outputs {
  _call: CycleCall;

  constructor(call: CycleCall) {
    this._call = call;
  }
}

export class GetVaultPPSCall extends ethereum.Call {
  get inputs(): GetVaultPPSCall__Inputs {
    return new GetVaultPPSCall__Inputs(this);
  }

  get outputs(): GetVaultPPSCall__Outputs {
    return new GetVaultPPSCall__Outputs(this);
  }
}

export class GetVaultPPSCall__Inputs {
  _call: GetVaultPPSCall;

  constructor(call: GetVaultPPSCall) {
    this._call = call;
  }

  get _assetVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetVaultPPSCall__Outputs {
  _call: GetVaultPPSCall;

  constructor(call: GetVaultPPSCall) {
    this._call = call;
  }

  get _pps(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultTVLCall extends ethereum.Call {
  get inputs(): GetVaultTVLCall__Inputs {
    return new GetVaultTVLCall__Inputs(this);
  }

  get outputs(): GetVaultTVLCall__Outputs {
    return new GetVaultTVLCall__Outputs(this);
  }
}

export class GetVaultTVLCall__Inputs {
  _call: GetVaultTVLCall;

  constructor(call: GetVaultTVLCall) {
    this._call = call;
  }

  get _assetVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetVaultTVLCall__Outputs {
  _call: GetVaultTVLCall;

  constructor(call: GetVaultTVLCall) {
    this._call = call;
  }

  get _tvl(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultTVLBreakdownCall extends ethereum.Call {
  get inputs(): GetVaultTVLBreakdownCall__Inputs {
    return new GetVaultTVLBreakdownCall__Inputs(this);
  }

  get outputs(): GetVaultTVLBreakdownCall__Outputs {
    return new GetVaultTVLBreakdownCall__Outputs(this);
  }
}

export class GetVaultTVLBreakdownCall__Inputs {
  _call: GetVaultTVLBreakdownCall;

  constructor(call: GetVaultTVLBreakdownCall) {
    this._call = call;
  }

  get _assetVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetVaultTVLBreakdownCall__Outputs {
  _call: GetVaultTVLBreakdownCall;

  constructor(call: GetVaultTVLBreakdownCall) {
    this._call = call;
  }

  get _total(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _buffer(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get _glp(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get _hedges(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class HandleGlpRewardsCall extends ethereum.Call {
  get inputs(): HandleGlpRewardsCall__Inputs {
    return new HandleGlpRewardsCall__Inputs(this);
  }

  get outputs(): HandleGlpRewardsCall__Outputs {
    return new HandleGlpRewardsCall__Outputs(this);
  }
}

export class HandleGlpRewardsCall__Inputs {
  _call: HandleGlpRewardsCall;

  constructor(call: HandleGlpRewardsCall) {
    this._call = call;
  }

  get compound(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class HandleGlpRewardsCall__Outputs {
  _call: HandleGlpRewardsCall;

  constructor(call: HandleGlpRewardsCall) {
    this._call = call;
  }
}

export class ProcessWithdrawalRequestsCall extends ethereum.Call {
  get inputs(): ProcessWithdrawalRequestsCall__Inputs {
    return new ProcessWithdrawalRequestsCall__Inputs(this);
  }

  get outputs(): ProcessWithdrawalRequestsCall__Outputs {
    return new ProcessWithdrawalRequestsCall__Outputs(this);
  }
}

export class ProcessWithdrawalRequestsCall__Inputs {
  _call: ProcessWithdrawalRequestsCall;

  constructor(call: ProcessWithdrawalRequestsCall) {
    this._call = call;
  }
}

export class ProcessWithdrawalRequestsCall__Outputs {
  _call: ProcessWithdrawalRequestsCall;

  constructor(call: ProcessWithdrawalRequestsCall) {
    this._call = call;
  }
}

export class RebalanceGlpPositionCall extends ethereum.Call {
  get inputs(): RebalanceGlpPositionCall__Inputs {
    return new RebalanceGlpPositionCall__Inputs(this);
  }

  get outputs(): RebalanceGlpPositionCall__Outputs {
    return new RebalanceGlpPositionCall__Outputs(this);
  }
}

export class RebalanceGlpPositionCall__Inputs {
  _call: RebalanceGlpPositionCall;

  constructor(call: RebalanceGlpPositionCall) {
    this._call = call;
  }

  get _nextGlpAllocation(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RebalanceGlpPositionCall__Outputs {
  _call: RebalanceGlpPositionCall;

  constructor(call: RebalanceGlpPositionCall) {
    this._call = call;
  }
}

export class ReduceGlpCall extends ethereum.Call {
  get inputs(): ReduceGlpCall__Inputs {
    return new ReduceGlpCall__Inputs(this);
  }

  get outputs(): ReduceGlpCall__Outputs {
    return new ReduceGlpCall__Outputs(this);
  }
}

export class ReduceGlpCall__Inputs {
  _call: ReduceGlpCall;

  constructor(call: ReduceGlpCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReduceGlpCall__Outputs {
  _call: ReduceGlpCall;

  constructor(call: ReduceGlpCall) {
    this._call = call;
  }
}

export class RemovePositionManagerAtCall extends ethereum.Call {
  get inputs(): RemovePositionManagerAtCall__Inputs {
    return new RemovePositionManagerAtCall__Inputs(this);
  }

  get outputs(): RemovePositionManagerAtCall__Outputs {
    return new RemovePositionManagerAtCall__Outputs(this);
  }
}

export class RemovePositionManagerAtCall__Inputs {
  _call: RemovePositionManagerAtCall;

  constructor(call: RemovePositionManagerAtCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get idx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemovePositionManagerAtCall__Outputs {
  _call: RemovePositionManagerAtCall;

  constructor(call: RemovePositionManagerAtCall) {
    this._call = call;
  }
}

export class ResetCheckpointPricesCall extends ethereum.Call {
  get inputs(): ResetCheckpointPricesCall__Inputs {
    return new ResetCheckpointPricesCall__Inputs(this);
  }

  get outputs(): ResetCheckpointPricesCall__Outputs {
    return new ResetCheckpointPricesCall__Outputs(this);
  }
}

export class ResetCheckpointPricesCall__Inputs {
  _call: ResetCheckpointPricesCall;

  constructor(call: ResetCheckpointPricesCall) {
    this._call = call;
  }

  get _noOfEpochs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetCheckpointPricesCall__Outputs {
  _call: ResetCheckpointPricesCall;

  constructor(call: ResetCheckpointPricesCall) {
    this._call = call;
  }
}

export class ResetGlpAttributionSlippageCall extends ethereum.Call {
  get inputs(): ResetGlpAttributionSlippageCall__Inputs {
    return new ResetGlpAttributionSlippageCall__Inputs(this);
  }

  get outputs(): ResetGlpAttributionSlippageCall__Outputs {
    return new ResetGlpAttributionSlippageCall__Outputs(this);
  }
}

export class ResetGlpAttributionSlippageCall__Inputs {
  _call: ResetGlpAttributionSlippageCall;

  constructor(call: ResetGlpAttributionSlippageCall) {
    this._call = call;
  }
}

export class ResetGlpAttributionSlippageCall__Outputs {
  _call: ResetGlpAttributionSlippageCall;

  constructor(call: ResetGlpAttributionSlippageCall) {
    this._call = call;
  }
}

export class RollToNextEpochCall extends ethereum.Call {
  get inputs(): RollToNextEpochCall__Inputs {
    return new RollToNextEpochCall__Inputs(this);
  }

  get outputs(): RollToNextEpochCall__Outputs {
    return new RollToNextEpochCall__Outputs(this);
  }
}

export class RollToNextEpochCall__Inputs {
  _call: RollToNextEpochCall;

  constructor(call: RollToNextEpochCall) {
    this._call = call;
  }

  get assetPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RollToNextEpochCall__Outputs {
  _call: RollToNextEpochCall;

  constructor(call: RollToNextEpochCall) {
    this._call = call;
  }
}

export class SetNettedPositionsCall extends ethereum.Call {
  get inputs(): SetNettedPositionsCall__Inputs {
    return new SetNettedPositionsCall__Inputs(this);
  }

  get outputs(): SetNettedPositionsCall__Outputs {
    return new SetNettedPositionsCall__Outputs(this);
  }
}

export class SetNettedPositionsCall__Inputs {
  _call: SetNettedPositionsCall;

  constructor(call: SetNettedPositionsCall) {
    this._call = call;
  }

  get _nettedPositions(): Array<Array<BigInt>> {
    return this._call.inputValues[0].value.toBigIntMatrix();
  }
}

export class SetNettedPositionsCall__Outputs {
  _call: SetNettedPositionsCall;

  constructor(call: SetNettedPositionsCall) {
    this._call = call;
  }
}

export class SetNettingPriceToleranceCall extends ethereum.Call {
  get inputs(): SetNettingPriceToleranceCall__Inputs {
    return new SetNettingPriceToleranceCall__Inputs(this);
  }

  get outputs(): SetNettingPriceToleranceCall__Outputs {
    return new SetNettingPriceToleranceCall__Outputs(this);
  }
}

export class SetNettingPriceToleranceCall__Inputs {
  _call: SetNettingPriceToleranceCall;

  constructor(call: SetNettingPriceToleranceCall) {
    this._call = call;
  }

  get _tolerance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNettingPriceToleranceCall__Outputs {
  _call: SetNettingPriceToleranceCall;

  constructor(call: SetNettingPriceToleranceCall) {
    this._call = call;
  }
}

export class SetRebalanceStateCall extends ethereum.Call {
  get inputs(): SetRebalanceStateCall__Inputs {
    return new SetRebalanceStateCall__Inputs(this);
  }

  get outputs(): SetRebalanceStateCall__Outputs {
    return new SetRebalanceStateCall__Outputs(this);
  }
}

export class SetRebalanceStateCall__Inputs {
  _call: SetRebalanceStateCall;

  constructor(call: SetRebalanceStateCall) {
    this._call = call;
  }

  get _rebalanceState(): SetRebalanceStateCall_rebalanceStateStruct {
    return changetype<SetRebalanceStateCall_rebalanceStateStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetRebalanceStateCall__Outputs {
  _call: SetRebalanceStateCall;

  constructor(call: SetRebalanceStateCall) {
    this._call = call;
  }
}

export class SetRebalanceStateCall_rebalanceStateStruct extends ethereum.Tuple {
  get glpAllocation(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get glpComposition(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get externalPositions(): Array<Array<BigInt>> {
    return this[2].toBigIntMatrix();
  }

  get aggregatePositions(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[4].toBigInt();
  }

  get adjustedExternalPositions(): Array<Array<BigInt>> {
    return this[5].toBigIntMatrix();
  }
}

export class SetVaultGlpAttributionCall extends ethereum.Call {
  get inputs(): SetVaultGlpAttributionCall__Inputs {
    return new SetVaultGlpAttributionCall__Inputs(this);
  }

  get outputs(): SetVaultGlpAttributionCall__Outputs {
    return new SetVaultGlpAttributionCall__Outputs(this);
  }
}

export class SetVaultGlpAttributionCall__Inputs {
  _call: SetVaultGlpAttributionCall;

  constructor(call: SetVaultGlpAttributionCall) {
    this._call = call;
  }

  get _newVals(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetVaultGlpAttributionCall__Outputs {
  _call: SetVaultGlpAttributionCall;

  constructor(call: SetVaultGlpAttributionCall) {
    this._call = call;
  }
}

export class SettleInternalPnlCall extends ethereum.Call {
  get inputs(): SettleInternalPnlCall__Inputs {
    return new SettleInternalPnlCall__Inputs(this);
  }

  get outputs(): SettleInternalPnlCall__Outputs {
    return new SettleInternalPnlCall__Outputs(this);
  }
}

export class SettleInternalPnlCall__Inputs {
  _call: SettleInternalPnlCall;

  constructor(call: SettleInternalPnlCall) {
    this._call = call;
  }

  get assetPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleInternalPnlCall__Outputs {
  _call: SettleInternalPnlCall;

  constructor(call: SettleInternalPnlCall) {
    this._call = call;
  }
}

export class UpdateEpochCall extends ethereum.Call {
  get inputs(): UpdateEpochCall__Inputs {
    return new UpdateEpochCall__Inputs(this);
  }

  get outputs(): UpdateEpochCall__Outputs {
    return new UpdateEpochCall__Outputs(this);
  }
}

export class UpdateEpochCall__Inputs {
  _call: UpdateEpochCall;

  constructor(call: UpdateEpochCall) {
    this._call = call;
  }

  get _epoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEpochCall__Outputs {
  _call: UpdateEpochCall;

  constructor(call: UpdateEpochCall) {
    this._call = call;
  }
}

export class UpdateNettingCheckpointPriceCall extends ethereum.Call {
  get inputs(): UpdateNettingCheckpointPriceCall__Inputs {
    return new UpdateNettingCheckpointPriceCall__Inputs(this);
  }

  get outputs(): UpdateNettingCheckpointPriceCall__Outputs {
    return new UpdateNettingCheckpointPriceCall__Outputs(this);
  }
}

export class UpdateNettingCheckpointPriceCall__Inputs {
  _call: UpdateNettingCheckpointPriceCall;

  constructor(call: UpdateNettingCheckpointPriceCall) {
    this._call = call;
  }

  get assetPrices(): UpdateNettingCheckpointPriceCallAssetPricesStruct {
    return changetype<UpdateNettingCheckpointPriceCallAssetPricesStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get epochId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateNettingCheckpointPriceCall__Outputs {
  _call: UpdateNettingCheckpointPriceCall;

  constructor(call: UpdateNettingCheckpointPriceCall) {
    this._call = call;
  }
}

export class UpdateNettingCheckpointPriceCallAssetPricesStruct extends ethereum.Tuple {
  get stable(): BigInt {
    return this[0].toBigInt();
  }

  get eth(): BigInt {
    return this[1].toBigInt();
  }

  get btc(): BigInt {
    return this[2].toBigInt();
  }

  get link(): BigInt {
    return this[3].toBigInt();
  }

  get uni(): BigInt {
    return this[4].toBigInt();
  }
}
