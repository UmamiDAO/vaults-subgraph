// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CallbackHandlerUpdated extends ethereum.Event {
  get params(): CallbackHandlerUpdated__Params {
    return new CallbackHandlerUpdated__Params(this);
  }
}

export class CallbackHandlerUpdated__Params {
  _event: CallbackHandlerUpdated;

  constructor(event: CallbackHandlerUpdated) {
    this._event = event;
  }

  get _sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _handler(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _enabled(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CloseRebalance extends ethereum.Event {
  get params(): CloseRebalance__Params {
    return new CloseRebalance__Params(this);
  }
}

export class CloseRebalance__Params {
  _event: CloseRebalance;

  constructor(event: CloseRebalance) {
    this._event = event;
  }

  get _timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CollectVaultFees extends ethereum.Event {
  get params(): CollectVaultFees__Params {
    return new CollectVaultFees__Params(this);
  }
}

export class CollectVaultFees__Params {
  _event: CollectVaultFees;

  constructor(event: CollectVaultFees) {
    this._event = event;
  }

  get totalVaultFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get performanceFeeInAsset(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get managementFeeInAsset(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _assetVault(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Cycle extends ethereum.Event {
  get params(): Cycle__Params {
    return new Cycle__Params(this);
  }
}

export class Cycle__Params {
  _event: Cycle;

  constructor(event: Cycle) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DefaultHandlerContractUpdated extends ethereum.Event {
  get params(): DefaultHandlerContractUpdated__Params {
    return new DefaultHandlerContractUpdated__Params(this);
  }
}

export class DefaultHandlerContractUpdated__Params {
  _event: DefaultHandlerContractUpdated;

  constructor(event: DefaultHandlerContractUpdated) {
    this._event = event;
  }

  get _sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _handler(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HandlerContractUpdated extends ethereum.Event {
  get params(): HandlerContractUpdated__Params {
    return new HandlerContractUpdated__Params(this);
  }
}

export class HandlerContractUpdated__Params {
  _event: HandlerContractUpdated;

  constructor(event: HandlerContractUpdated) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OpenRebalance extends ethereum.Event {
  get params(): OpenRebalance__Params {
    return new OpenRebalance__Params(this);
  }
}

export class OpenRebalance__Params {
  _event: OpenRebalance;

  constructor(event: OpenRebalance) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nextVaultGlpAlloc(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get nextGlpComp(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get adjustedPositions(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SwapHandlerUpdated extends ethereum.Event {
  get params(): SwapHandlerUpdated__Params {
    return new SwapHandlerUpdated__Params(this);
  }
}

export class SwapHandlerUpdated__Params {
  _event: SwapHandlerUpdated;

  constructor(event: SwapHandlerUpdated) {
    this._event = event;
  }

  get _handled(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AggregateVault__getRebalanceStateResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<Array<BigInt>>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<Array<BigInt>>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigIntMatrix(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigIntArray(this.value3));
    return map;
  }

  getGlpAllocation(): Array<BigInt> {
    return this.value0;
  }

  getGlpComposition(): Array<BigInt> {
    return this.value1;
  }

  getExternalPositions(): Array<Array<BigInt>> {
    return this.value2;
  }

  getAggregatePositions(): Array<BigInt> {
    return this.value3;
  }
}

export class AggregateVault__getVaultFromAssetResultVaultStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get feeWatermarkBalance(): BigInt {
    return this[2].toBigInt();
  }

  get epochDelta(): BigInt {
    return this[3].toBigInt();
  }

  get lastCheckpointTvl(): BigInt {
    return this[4].toBigInt();
  }
}

export class AggregateVault extends ethereum.SmartContract {
  static bind(address: Address): AggregateVault {
    return new AggregateVault("AggregateVault", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AUTH(): Address {
    let result = super.call("AUTH", "AUTH():(address)", []);

    return result[0].toAddress();
  }

  try_AUTH(): ethereum.CallResult<Address> {
    let result = super.tryCall("AUTH", "AUTH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SCALE(): BigInt {
    let result = super.call("SCALE", "SCALE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SCALE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SCALE", "SCALE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STORAGE_SLOT(): Bytes {
    let result = super.call("STORAGE_SLOT", "STORAGE_SLOT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_STORAGE_SLOT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("STORAGE_SLOT", "STORAGE_SLOT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentCallbackHandler(): Address {
    let result = super.call(
      "currentCallbackHandler",
      "currentCallbackHandler():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_currentCallbackHandler(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentCallbackHandler",
      "currentCallbackHandler():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultHandlers(param0: Bytes): Address {
    let result = super.call(
      "defaultHandlers",
      "defaultHandlers(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_defaultHandlers(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultHandlers",
      "defaultHandlers(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  executeSwap(
    _swapManager: Address,
    _tokenIn: Address,
    _tokenOut: Address,
    _amountIn: BigInt,
    _minOut: BigInt,
    _data: Bytes
  ): BigInt {
    let result = super.call(
      "executeSwap",
      "executeSwap(address,address,address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_swapManager),
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBigInt();
  }

  try_executeSwap(
    _swapManager: Address,
    _tokenIn: Address,
    _tokenOut: Address,
    _amountIn: BigInt,
    _minOut: BigInt,
    _data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "executeSwap",
      "executeSwap(address,address,address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_swapManager),
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fsGLP(): Address {
    let result = super.call("fsGLP", "fsGLP():(address)", []);

    return result[0].toAddress();
  }

  try_fsGLP(): ethereum.CallResult<Address> {
    let result = super.tryCall("fsGLP", "fsGLP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRebalanceState(): AggregateVault__getRebalanceStateResult {
    let result = super.call(
      "getRebalanceState",
      "getRebalanceState():(uint256[5],uint256[5],int256[5][5],int256[5])",
      []
    );

    return new AggregateVault__getRebalanceStateResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntMatrix(),
      result[3].toBigIntArray()
    );
  }

  try_getRebalanceState(): ethereum.CallResult<
    AggregateVault__getRebalanceStateResult
  > {
    let result = super.tryCall(
      "getRebalanceState",
      "getRebalanceState():(uint256[5],uint256[5],int256[5][5],int256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AggregateVault__getRebalanceStateResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntMatrix(),
        value[3].toBigIntArray()
      )
    );
  }

  getVaultFromAsset(
    _asset: Address
  ): AggregateVault__getVaultFromAssetResultVaultStruct {
    let result = super.call(
      "getVaultFromAsset",
      "getVaultFromAsset(address):((address,address,uint256,int256,uint256))",
      [ethereum.Value.fromAddress(_asset)]
    );

    return changetype<AggregateVault__getVaultFromAssetResultVaultStruct>(
      result[0].toTuple()
    );
  }

  try_getVaultFromAsset(
    _asset: Address
  ): ethereum.CallResult<AggregateVault__getVaultFromAssetResultVaultStruct> {
    let result = super.tryCall(
      "getVaultFromAsset",
      "getVaultFromAsset(address):((address,address,uint256,int256,uint256))",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AggregateVault__getVaultFromAssetResultVaultStruct>(
        value[0].toTuple()
      )
    );
  }

  getVaultIndex(_asset: Address): BigInt {
    let result = super.call(
      "getVaultIndex",
      "getVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toBigInt();
  }

  try_getVaultIndex(_asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultIndex",
      "getVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultPPS(_assetVault: Address): BigInt {
    let result = super.call("getVaultPPS", "getVaultPPS(address):(uint256)", [
      ethereum.Value.fromAddress(_assetVault)
    ]);

    return result[0].toBigInt();
  }

  try_getVaultPPS(_assetVault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultPPS",
      "getVaultPPS(address):(uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultTVL(_assetVault: Address): BigInt {
    let result = super.call("getVaultTVL", "getVaultTVL(address):(uint256)", [
      ethereum.Value.fromAddress(_assetVault)
    ]);

    return result[0].toBigInt();
  }

  try_getVaultTVL(_assetVault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultTVL",
      "getVaultTVL(address):(uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  glpCloseSlippage(): BigInt {
    let result = super.call(
      "glpCloseSlippage",
      "glpCloseSlippage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_glpCloseSlippage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "glpCloseSlippage",
      "glpCloseSlippage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  handleDeposit(asset: Address, _amount: BigInt, _account: Address): BigInt {
    let result = super.call(
      "handleDeposit",
      "handleDeposit(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_account)
      ]
    );

    return result[0].toBigInt();
  }

  try_handleDeposit(
    asset: Address,
    _amount: BigInt,
    _account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "handleDeposit",
      "handleDeposit(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  handleWithdraw(asset: Address, _amount: BigInt, _account: Address): BigInt {
    let result = super.call(
      "handleWithdraw",
      "handleWithdraw(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_account)
      ]
    );

    return result[0].toBigInt();
  }

  try_handleWithdraw(
    asset: Address,
    _amount: BigInt,
    _account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "handleWithdraw",
      "handleWithdraw(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  handlerContractCallbacks(param0: Address, param1: Bytes): boolean {
    let result = super.call(
      "handlerContractCallbacks",
      "handlerContractCallbacks(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_handlerContractCallbacks(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "handlerContractCallbacks",
      "handlerContractCallbacks(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  handlerContracts(param0: Address): boolean {
    let result = super.call(
      "handlerContracts",
      "handlerContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_handlerContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "handlerContracts",
      "handlerContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  previewDepositFee(_size: BigInt): BigInt {
    let result = super.call(
      "previewDepositFee",
      "previewDepositFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_size)]
    );

    return result[0].toBigInt();
  }

  try_previewDepositFee(_size: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewDepositFee",
      "previewDepositFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_size)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdrawalFee(token: Address, _size: BigInt): BigInt {
    let result = super.call(
      "previewWithdrawalFee",
      "previewWithdrawalFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(_size)
      ]
    );

    return result[0].toBigInt();
  }

  try_previewWithdrawalFee(
    token: Address,
    _size: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewWithdrawalFee",
      "previewWithdrawalFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(_size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapHandlers(param0: Address): boolean {
    let result = super.call("swapHandlers", "swapHandlers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_swapHandlers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("swapHandlers", "swapHandlers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultGlpAttribution(): Array<BigInt> {
    let result = super.call(
      "vaultGlpAttribution",
      "vaultGlpAttribution():(uint256[5])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_vaultGlpAttribution(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "vaultGlpAttribution",
      "vaultGlpAttribution():(uint256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  vaultGlpAttribution1(_idx: BigInt): BigInt {
    let result = super.call(
      "vaultGlpAttribution",
      "vaultGlpAttribution(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_idx)]
    );

    return result[0].toBigInt();
  }

  try_vaultGlpAttribution1(_idx: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultGlpAttribution",
      "vaultGlpAttribution(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_idx)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _auth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _glpHandler(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddPositionManagerCall extends ethereum.Call {
  get inputs(): AddPositionManagerCall__Inputs {
    return new AddPositionManagerCall__Inputs(this);
  }

  get outputs(): AddPositionManagerCall__Outputs {
    return new AddPositionManagerCall__Outputs(this);
  }
}

export class AddPositionManagerCall__Inputs {
  _call: AddPositionManagerCall;

  constructor(call: AddPositionManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPositionManagerCall__Outputs {
  _call: AddPositionManagerCall;

  constructor(call: AddPositionManagerCall) {
    this._call = call;
  }
}

export class CloseRebalancePeriodCall extends ethereum.Call {
  get inputs(): CloseRebalancePeriodCall__Inputs {
    return new CloseRebalancePeriodCall__Inputs(this);
  }

  get outputs(): CloseRebalancePeriodCall__Outputs {
    return new CloseRebalancePeriodCall__Outputs(this);
  }
}

export class CloseRebalancePeriodCall__Inputs {
  _call: CloseRebalancePeriodCall;

  constructor(call: CloseRebalancePeriodCall) {
    this._call = call;
  }

  get _glpPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseRebalancePeriodCall__Outputs {
  _call: CloseRebalancePeriodCall;

  constructor(call: CloseRebalancePeriodCall) {
    this._call = call;
  }
}

export class CycleCall extends ethereum.Call {
  get inputs(): CycleCall__Inputs {
    return new CycleCall__Inputs(this);
  }

  get outputs(): CycleCall__Outputs {
    return new CycleCall__Outputs(this);
  }
}

export class CycleCall__Inputs {
  _call: CycleCall;

  constructor(call: CycleCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CycleCall__Outputs {
  _call: CycleCall;

  constructor(call: CycleCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _handler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get ret(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExecuteSwapCall extends ethereum.Call {
  get inputs(): ExecuteSwapCall__Inputs {
    return new ExecuteSwapCall__Inputs(this);
  }

  get outputs(): ExecuteSwapCall__Outputs {
    return new ExecuteSwapCall__Outputs(this);
  }
}

export class ExecuteSwapCall__Inputs {
  _call: ExecuteSwapCall;

  constructor(call: ExecuteSwapCall) {
    this._call = call;
  }

  get _swapManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ExecuteSwapCall__Outputs {
  _call: ExecuteSwapCall;

  constructor(call: ExecuteSwapCall) {
    this._call = call;
  }

  get _amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteWithCallbackHandlerCall extends ethereum.Call {
  get inputs(): ExecuteWithCallbackHandlerCall__Inputs {
    return new ExecuteWithCallbackHandlerCall__Inputs(this);
  }

  get outputs(): ExecuteWithCallbackHandlerCall__Outputs {
    return new ExecuteWithCallbackHandlerCall__Outputs(this);
  }
}

export class ExecuteWithCallbackHandlerCall__Inputs {
  _call: ExecuteWithCallbackHandlerCall;

  constructor(call: ExecuteWithCallbackHandlerCall) {
    this._call = call;
  }

  get _handler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _callbackHandler(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ExecuteWithCallbackHandlerCall__Outputs {
  _call: ExecuteWithCallbackHandlerCall;

  constructor(call: ExecuteWithCallbackHandlerCall) {
    this._call = call;
  }

  get ret(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class GetVaultPPSCall extends ethereum.Call {
  get inputs(): GetVaultPPSCall__Inputs {
    return new GetVaultPPSCall__Inputs(this);
  }

  get outputs(): GetVaultPPSCall__Outputs {
    return new GetVaultPPSCall__Outputs(this);
  }
}

export class GetVaultPPSCall__Inputs {
  _call: GetVaultPPSCall;

  constructor(call: GetVaultPPSCall) {
    this._call = call;
  }

  get _assetVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetVaultPPSCall__Outputs {
  _call: GetVaultPPSCall;

  constructor(call: GetVaultPPSCall) {
    this._call = call;
  }

  get _pps(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultTVLCall extends ethereum.Call {
  get inputs(): GetVaultTVLCall__Inputs {
    return new GetVaultTVLCall__Inputs(this);
  }

  get outputs(): GetVaultTVLCall__Outputs {
    return new GetVaultTVLCall__Outputs(this);
  }
}

export class GetVaultTVLCall__Inputs {
  _call: GetVaultTVLCall;

  constructor(call: GetVaultTVLCall) {
    this._call = call;
  }

  get _assetVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetVaultTVLCall__Outputs {
  _call: GetVaultTVLCall;

  constructor(call: GetVaultTVLCall) {
    this._call = call;
  }

  get _tvl(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class HandleDepositCall extends ethereum.Call {
  get inputs(): HandleDepositCall__Inputs {
    return new HandleDepositCall__Inputs(this);
  }

  get outputs(): HandleDepositCall__Outputs {
    return new HandleDepositCall__Outputs(this);
  }
}

export class HandleDepositCall__Inputs {
  _call: HandleDepositCall;

  constructor(call: HandleDepositCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class HandleDepositCall__Outputs {
  _call: HandleDepositCall;

  constructor(call: HandleDepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class HandleGlpRewardsCall extends ethereum.Call {
  get inputs(): HandleGlpRewardsCall__Inputs {
    return new HandleGlpRewardsCall__Inputs(this);
  }

  get outputs(): HandleGlpRewardsCall__Outputs {
    return new HandleGlpRewardsCall__Outputs(this);
  }
}

export class HandleGlpRewardsCall__Inputs {
  _call: HandleGlpRewardsCall;

  constructor(call: HandleGlpRewardsCall) {
    this._call = call;
  }

  get compound(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class HandleGlpRewardsCall__Outputs {
  _call: HandleGlpRewardsCall;

  constructor(call: HandleGlpRewardsCall) {
    this._call = call;
  }
}

export class HandleWithdrawCall extends ethereum.Call {
  get inputs(): HandleWithdrawCall__Inputs {
    return new HandleWithdrawCall__Inputs(this);
  }

  get outputs(): HandleWithdrawCall__Outputs {
    return new HandleWithdrawCall__Outputs(this);
  }
}

export class HandleWithdrawCall__Inputs {
  _call: HandleWithdrawCall;

  constructor(call: HandleWithdrawCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class HandleWithdrawCall__Outputs {
  _call: HandleWithdrawCall;

  constructor(call: HandleWithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OpenRebalancePeriodCall extends ethereum.Call {
  get inputs(): OpenRebalancePeriodCall__Inputs {
    return new OpenRebalancePeriodCall__Inputs(this);
  }

  get outputs(): OpenRebalancePeriodCall__Outputs {
    return new OpenRebalancePeriodCall__Outputs(this);
  }
}

export class OpenRebalancePeriodCall__Inputs {
  _call: OpenRebalancePeriodCall;

  constructor(call: OpenRebalancePeriodCall) {
    this._call = call;
  }

  get nextVaultGlpAlloc(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get nextGlpComp(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get nextHedgeMatrix(): Array<Array<BigInt>> {
    return this._call.inputValues[2].value.toBigIntMatrix();
  }

  get adjustedPositions(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get adjustedNettedHedgeMatrix(): Array<Array<BigInt>> {
    return this._call.inputValues[4].value.toBigIntMatrix();
  }
}

export class OpenRebalancePeriodCall__Outputs {
  _call: OpenRebalancePeriodCall;

  constructor(call: OpenRebalancePeriodCall) {
    this._call = call;
  }
}

export class PauseDepositsCall extends ethereum.Call {
  get inputs(): PauseDepositsCall__Inputs {
    return new PauseDepositsCall__Inputs(this);
  }

  get outputs(): PauseDepositsCall__Outputs {
    return new PauseDepositsCall__Outputs(this);
  }
}

export class PauseDepositsCall__Inputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class PauseDepositsCall__Outputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class RugCall extends ethereum.Call {
  get inputs(): RugCall__Inputs {
    return new RugCall__Inputs(this);
  }

  get outputs(): RugCall__Outputs {
    return new RugCall__Outputs(this);
  }
}

export class RugCall__Inputs {
  _call: RugCall;

  constructor(call: RugCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RugCall__Outputs {
  _call: RugCall;

  constructor(call: RugCall) {
    this._call = call;
  }
}

export class SetAssetVaultsCall extends ethereum.Call {
  get inputs(): SetAssetVaultsCall__Inputs {
    return new SetAssetVaultsCall__Inputs(this);
  }

  get outputs(): SetAssetVaultsCall__Outputs {
    return new SetAssetVaultsCall__Outputs(this);
  }
}

export class SetAssetVaultsCall__Inputs {
  _call: SetAssetVaultsCall;

  constructor(call: SetAssetVaultsCall) {
    this._call = call;
  }

  get _assetVaults(): Array<SetAssetVaultsCall_assetVaultsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetAssetVaultsCall_assetVaultsStruct
    >();
  }

  get _swapFees(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetAssetVaultsCall__Outputs {
  _call: SetAssetVaultsCall;

  constructor(call: SetAssetVaultsCall) {
    this._call = call;
  }
}

export class SetAssetVaultsCall_assetVaultsStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get feeWatermarkBalance(): BigInt {
    return this[2].toBigInt();
  }

  get epochDelta(): BigInt {
    return this[3].toBigInt();
  }

  get lastCheckpointTvl(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetFeeWatermarksCall extends ethereum.Call {
  get inputs(): SetFeeWatermarksCall__Inputs {
    return new SetFeeWatermarksCall__Inputs(this);
  }

  get outputs(): SetFeeWatermarksCall__Outputs {
    return new SetFeeWatermarksCall__Outputs(this);
  }
}

export class SetFeeWatermarksCall__Inputs {
  _call: SetFeeWatermarksCall;

  constructor(call: SetFeeWatermarksCall) {
    this._call = call;
  }

  get _newWatermarks(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetFeeWatermarksCall__Outputs {
  _call: SetFeeWatermarksCall;

  constructor(call: SetFeeWatermarksCall) {
    this._call = call;
  }
}

export class SetPeripheralCall extends ethereum.Call {
  get inputs(): SetPeripheralCall__Inputs {
    return new SetPeripheralCall__Inputs(this);
  }

  get outputs(): SetPeripheralCall__Outputs {
    return new SetPeripheralCall__Outputs(this);
  }
}

export class SetPeripheralCall__Inputs {
  _call: SetPeripheralCall;

  constructor(call: SetPeripheralCall) {
    this._call = call;
  }

  get _peripheral(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPeripheralCall__Outputs {
  _call: SetPeripheralCall;

  constructor(call: SetPeripheralCall) {
    this._call = call;
  }
}

export class SetShouldCheckNettingCall extends ethereum.Call {
  get inputs(): SetShouldCheckNettingCall__Inputs {
    return new SetShouldCheckNettingCall__Inputs(this);
  }

  get outputs(): SetShouldCheckNettingCall__Outputs {
    return new SetShouldCheckNettingCall__Outputs(this);
  }
}

export class SetShouldCheckNettingCall__Inputs {
  _call: SetShouldCheckNettingCall;

  constructor(call: SetShouldCheckNettingCall) {
    this._call = call;
  }

  get _newVal(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetShouldCheckNettingCall__Outputs {
  _call: SetShouldCheckNettingCall;

  constructor(call: SetShouldCheckNettingCall) {
    this._call = call;
  }
}

export class SetVaultFeesCall extends ethereum.Call {
  get inputs(): SetVaultFeesCall__Inputs {
    return new SetVaultFeesCall__Inputs(this);
  }

  get outputs(): SetVaultFeesCall__Outputs {
    return new SetVaultFeesCall__Outputs(this);
  }
}

export class SetVaultFeesCall__Inputs {
  _call: SetVaultFeesCall;

  constructor(call: SetVaultFeesCall) {
    this._call = call;
  }

  get _performanceFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _managementFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withdrawalFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _depositFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetVaultFeesCall__Outputs {
  _call: SetVaultFeesCall;

  constructor(call: SetVaultFeesCall) {
    this._call = call;
  }
}

export class UnpauseDepositsCall extends ethereum.Call {
  get inputs(): UnpauseDepositsCall__Inputs {
    return new UnpauseDepositsCall__Inputs(this);
  }

  get outputs(): UnpauseDepositsCall__Outputs {
    return new UnpauseDepositsCall__Outputs(this);
  }
}

export class UnpauseDepositsCall__Inputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class UnpauseDepositsCall__Outputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class UpdateDefaultHandlerContractCall extends ethereum.Call {
  get inputs(): UpdateDefaultHandlerContractCall__Inputs {
    return new UpdateDefaultHandlerContractCall__Inputs(this);
  }

  get outputs(): UpdateDefaultHandlerContractCall__Outputs {
    return new UpdateDefaultHandlerContractCall__Outputs(this);
  }
}

export class UpdateDefaultHandlerContractCall__Inputs {
  _call: UpdateDefaultHandlerContractCall;

  constructor(call: UpdateDefaultHandlerContractCall) {
    this._call = call;
  }

  get _sig(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _handler(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateDefaultHandlerContractCall__Outputs {
  _call: UpdateDefaultHandlerContractCall;

  constructor(call: UpdateDefaultHandlerContractCall) {
    this._call = call;
  }
}

export class UpdateFeeWatermarkBalanceCall extends ethereum.Call {
  get inputs(): UpdateFeeWatermarkBalanceCall__Inputs {
    return new UpdateFeeWatermarkBalanceCall__Inputs(this);
  }

  get outputs(): UpdateFeeWatermarkBalanceCall__Outputs {
    return new UpdateFeeWatermarkBalanceCall__Outputs(this);
  }
}

export class UpdateFeeWatermarkBalanceCall__Inputs {
  _call: UpdateFeeWatermarkBalanceCall;

  constructor(call: UpdateFeeWatermarkBalanceCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeWatermarkBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateFeeWatermarkBalanceCall__Outputs {
  _call: UpdateFeeWatermarkBalanceCall;

  constructor(call: UpdateFeeWatermarkBalanceCall) {
    this._call = call;
  }
}

export class UpdateHandlerContractCall extends ethereum.Call {
  get inputs(): UpdateHandlerContractCall__Inputs {
    return new UpdateHandlerContractCall__Inputs(this);
  }

  get outputs(): UpdateHandlerContractCall__Outputs {
    return new UpdateHandlerContractCall__Outputs(this);
  }
}

export class UpdateHandlerContractCall__Inputs {
  _call: UpdateHandlerContractCall;

  constructor(call: UpdateHandlerContractCall) {
    this._call = call;
  }

  get _handler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateHandlerContractCall__Outputs {
  _call: UpdateHandlerContractCall;

  constructor(call: UpdateHandlerContractCall) {
    this._call = call;
  }
}

export class UpdateSwapHandlerCall extends ethereum.Call {
  get inputs(): UpdateSwapHandlerCall__Inputs {
    return new UpdateSwapHandlerCall__Inputs(this);
  }

  get outputs(): UpdateSwapHandlerCall__Outputs {
    return new UpdateSwapHandlerCall__Outputs(this);
  }
}

export class UpdateSwapHandlerCall__Inputs {
  _call: UpdateSwapHandlerCall;

  constructor(call: UpdateSwapHandlerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateSwapHandlerCall__Outputs {
  _call: UpdateSwapHandlerCall;

  constructor(call: UpdateSwapHandlerCall) {
    this._call = call;
  }
}

export class UpdateTotalGlpCall extends ethereum.Call {
  get inputs(): UpdateTotalGlpCall__Inputs {
    return new UpdateTotalGlpCall__Inputs(this);
  }

  get outputs(): UpdateTotalGlpCall__Outputs {
    return new UpdateTotalGlpCall__Outputs(this);
  }
}

export class UpdateTotalGlpCall__Inputs {
  _call: UpdateTotalGlpCall;

  constructor(call: UpdateTotalGlpCall) {
    this._call = call;
  }
}

export class UpdateTotalGlpCall__Outputs {
  _call: UpdateTotalGlpCall;

  constructor(call: UpdateTotalGlpCall) {
    this._call = call;
  }
}
