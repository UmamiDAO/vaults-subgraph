// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CloseRebalance extends ethereum.Event {
  get params(): CloseRebalance__Params {
    return new CloseRebalance__Params(this);
  }
}

export class CloseRebalance__Params {
  _event: CloseRebalance;

  constructor(event: CloseRebalance) {
    this._event = event;
  }

  get _timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CollectVaultFees extends ethereum.Event {
  get params(): CollectVaultFees__Params {
    return new CollectVaultFees__Params(this);
  }
}

export class CollectVaultFees__Params {
  _event: CollectVaultFees;

  constructor(event: CollectVaultFees) {
    this._event = event;
  }

  get totalVaultFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get performanceFeeInAsset(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get managementFeeInAsset(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _assetVault(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Cycle extends ethereum.Event {
  get params(): Cycle__Params {
    return new Cycle__Params(this);
  }
}

export class Cycle__Params {
  _event: Cycle;

  constructor(event: Cycle) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenRebalance extends ethereum.Event {
  get params(): OpenRebalance__Params {
    return new OpenRebalance__Params(this);
  }
}

export class OpenRebalance__Params {
  _event: OpenRebalance;

  constructor(event: OpenRebalance) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nextVaultGlpAlloc(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get nextGlpComp(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get adjustedPositions(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class VaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get feeWatermarkBalance(): BigInt {
    return this[2].toBigInt();
  }

  get epochDelta(): BigInt {
    return this[3].toBigInt();
  }

  get lastCheckpointTvl(): BigInt {
    return this[4].toBigInt();
  }
}

export class VaultHelper__getLastNettedPriceResult_nettedPricesStruct extends ethereum.Tuple {
  get stable(): BigInt {
    return this[0].toBigInt();
  }

  get eth(): BigInt {
    return this[1].toBigInt();
  }

  get btc(): BigInt {
    return this[2].toBigInt();
  }

  get link(): BigInt {
    return this[3].toBigInt();
  }

  get uni(): BigInt {
    return this[4].toBigInt();
  }
}

export class VaultHelper__getRebalanceStateResult_rebalanceStateStruct extends ethereum.Tuple {
  get glpAllocation(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get glpComposition(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get externalPositions(): Array<Array<BigInt>> {
    return this[2].toBigIntMatrix();
  }

  get aggregatePositions(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[4].toBigInt();
  }

  get adjustedExternalPositions(): Array<Array<BigInt>> {
    return this[5].toBigIntMatrix();
  }
}

export class VaultHelper__getVaultStateResult_vaultStateStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get rebalanceOpen(): boolean {
    return this[1].toBoolean();
  }

  get glpAllocation(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get aggregatePositions(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get externalPositions(): Array<Array<BigInt>> {
    return this[4].toBigIntMatrix();
  }

  get feeRecipient(): Address {
    return this[5].toAddress();
  }
}

export class VaultHelper extends ethereum.SmartContract {
  static bind(address: Address): VaultHelper {
    return new VaultHelper("VaultHelper", address);
  }

  STORAGE_SLOT(): Bytes {
    let result = super.call("STORAGE_SLOT", "STORAGE_SLOT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_STORAGE_SLOT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("STORAGE_SLOT", "STORAGE_SLOT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  callbackSigs(): Array<Bytes> {
    let result = super.call("callbackSigs", "callbackSigs():(bytes4[])", []);

    return result[0].toBytesArray();
  }

  try_callbackSigs(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("callbackSigs", "callbackSigs():(bytes4[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getActiveAggregatePositions(): Array<BigInt> {
    let result = super.call(
      "getActiveAggregatePositions",
      "getActiveAggregatePositions():(int256[4])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getActiveAggregatePositions(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getActiveAggregatePositions",
      "getActiveAggregatePositions():(int256[4])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getActiveExternalPositions(): Array<Array<BigInt>> {
    let result = super.call(
      "getActiveExternalPositions",
      "getActiveExternalPositions():(int256[5][5])",
      []
    );

    return result[0].toBigIntMatrix();
  }

  try_getActiveExternalPositions(): ethereum.CallResult<Array<Array<BigInt>>> {
    let result = super.tryCall(
      "getActiveExternalPositions",
      "getActiveExternalPositions():(int256[5][5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntMatrix());
  }

  getAssetVaultEntries(): Array<
    VaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct
  > {
    let result = super.call(
      "getAssetVaultEntries",
      "getAssetVaultEntries():((address,address,uint256,int256,uint256)[5])",
      []
    );

    return result[0].toTupleArray<
      VaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct
    >();
  }

  try_getAssetVaultEntries(): ethereum.CallResult<
    Array<VaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct>
  > {
    let result = super.tryCall(
      "getAssetVaultEntries",
      "getAssetVaultEntries():((address,address,uint256,int256,uint256)[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        VaultHelper__getAssetVaultEntriesResult_assetVaultEntryStruct
      >()
    );
  }

  getLastGlpComposition(): Array<BigInt> {
    let result = super.call(
      "getLastGlpComposition",
      "getLastGlpComposition():(uint256[5])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getLastGlpComposition(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getLastGlpComposition",
      "getLastGlpComposition():(uint256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLastNettedPrice(
    _epoch: BigInt
  ): VaultHelper__getLastNettedPriceResult_nettedPricesStruct {
    let result = super.call(
      "getLastNettedPrice",
      "getLastNettedPrice(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_epoch)]
    );

    return changetype<VaultHelper__getLastNettedPriceResult_nettedPricesStruct>(
      result[0].toTuple()
    );
  }

  try_getLastNettedPrice(
    _epoch: BigInt
  ): ethereum.CallResult<
    VaultHelper__getLastNettedPriceResult_nettedPricesStruct
  > {
    let result = super.tryCall(
      "getLastNettedPrice",
      "getLastNettedPrice(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VaultHelper__getLastNettedPriceResult_nettedPricesStruct>(
        value[0].toTuple()
      )
    );
  }

  getNettedPositions(): Array<Array<BigInt>> {
    let result = super.call(
      "getNettedPositions",
      "getNettedPositions():(int256[5][5])",
      []
    );

    return result[0].toBigIntMatrix();
  }

  try_getNettedPositions(): ethereum.CallResult<Array<Array<BigInt>>> {
    let result = super.tryCall(
      "getNettedPositions",
      "getNettedPositions():(int256[5][5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntMatrix());
  }

  getPositionManagers(): Array<Address> {
    let result = super.call(
      "getPositionManagers",
      "getPositionManagers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getPositionManagers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPositionManagers",
      "getPositionManagers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRebalanceState(): VaultHelper__getRebalanceStateResult_rebalanceStateStruct {
    let result = super.call(
      "getRebalanceState",
      "getRebalanceState():((uint256[5],uint256[5],int256[5][5],int256[5],uint256,int256[5][5]))",
      []
    );

    return changetype<
      VaultHelper__getRebalanceStateResult_rebalanceStateStruct
    >(result[0].toTuple());
  }

  try_getRebalanceState(): ethereum.CallResult<
    VaultHelper__getRebalanceStateResult_rebalanceStateStruct
  > {
    let result = super.tryCall(
      "getRebalanceState",
      "getRebalanceState():((uint256[5],uint256[5],int256[5][5],int256[5],uint256,int256[5][5]))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VaultHelper__getRebalanceStateResult_rebalanceStateStruct>(
        value[0].toTuple()
      )
    );
  }

  getSwapFees(): Array<BigInt> {
    let result = super.call("getSwapFees", "getSwapFees():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getSwapFees(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getSwapFees", "getSwapFees():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTotalGlp(): BigInt {
    let result = super.call("getTotalGlp", "getTotalGlp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalGlp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTotalGlp", "getTotalGlp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultGlpAttribution(): Array<BigInt> {
    let result = super.call(
      "getVaultGlpAttribution",
      "getVaultGlpAttribution():(uint256[5])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getVaultGlpAttribution(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getVaultGlpAttribution",
      "getVaultGlpAttribution():(uint256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getVaultPPS(_assetVault: Address): BigInt {
    let result = super.call("getVaultPPS", "getVaultPPS(address):(uint256)", [
      ethereum.Value.fromAddress(_assetVault)
    ]);

    return result[0].toBigInt();
  }

  try_getVaultPPS(_assetVault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultPPS",
      "getVaultPPS(address):(uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultState(): VaultHelper__getVaultStateResult_vaultStateStruct {
    let result = super.call(
      "getVaultState",
      "getVaultState():((uint256,bool,uint256[5],int256[5],int256[5][5],address))",
      []
    );

    return changetype<VaultHelper__getVaultStateResult_vaultStateStruct>(
      result[0].toTuple()
    );
  }

  try_getVaultState(): ethereum.CallResult<
    VaultHelper__getVaultStateResult_vaultStateStruct
  > {
    let result = super.tryCall(
      "getVaultState",
      "getVaultState():((uint256,bool,uint256[5],int256[5],int256[5][5],address))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VaultHelper__getVaultStateResult_vaultStateStruct>(
        value[0].toTuple()
      )
    );
  }

  getVaultTVL(_assetVault: Address): BigInt {
    let result = super.call("getVaultTVL", "getVaultTVL(address):(uint256)", [
      ethereum.Value.fromAddress(_assetVault)
    ]);

    return result[0].toBigInt();
  }

  try_getVaultTVL(_assetVault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultTVL",
      "getVaultTVL(address):(uint256)",
      [ethereum.Value.fromAddress(_assetVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToAssetVaultIndex(_token: Address): BigInt {
    let result = super.call(
      "tokenToAssetVaultIndex",
      "tokenToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_tokenToAssetVaultIndex(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToAssetVaultIndex",
      "tokenToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultGlpAttribution(): Array<BigInt> {
    let result = super.call(
      "vaultGlpAttribution",
      "vaultGlpAttribution():(uint256[5])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_vaultGlpAttribution(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "vaultGlpAttribution",
      "vaultGlpAttribution():(uint256[5])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  vaultGlpAttribution1(_idx: BigInt): BigInt {
    let result = super.call(
      "vaultGlpAttribution",
      "vaultGlpAttribution(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_idx)]
    );

    return result[0].toBigInt();
  }

  try_vaultGlpAttribution1(_idx: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultGlpAttribution",
      "vaultGlpAttribution(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_idx)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultToAssetVaultIndex(_vault: Address): BigInt {
    let result = super.call(
      "vaultToAssetVaultIndex",
      "vaultToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_vault)]
    );

    return result[0].toBigInt();
  }

  try_vaultToAssetVaultIndex(_vault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultToAssetVaultIndex",
      "vaultToAssetVaultIndex(address):(uint256)",
      [ethereum.Value.fromAddress(_vault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class _getAllAssetVaultsHedgeAtributionCall extends ethereum.Call {
  get inputs(): _getAllAssetVaultsHedgeAtributionCall__Inputs {
    return new _getAllAssetVaultsHedgeAtributionCall__Inputs(this);
  }

  get outputs(): _getAllAssetVaultsHedgeAtributionCall__Outputs {
    return new _getAllAssetVaultsHedgeAtributionCall__Outputs(this);
  }
}

export class _getAllAssetVaultsHedgeAtributionCall__Inputs {
  _call: _getAllAssetVaultsHedgeAtributionCall;

  constructor(call: _getAllAssetVaultsHedgeAtributionCall) {
    this._call = call;
  }
}

export class _getAllAssetVaultsHedgeAtributionCall__Outputs {
  _call: _getAllAssetVaultsHedgeAtributionCall;

  constructor(call: _getAllAssetVaultsHedgeAtributionCall) {
    this._call = call;
  }

  get hedgeAttribution(): Array<Array<BigInt>> {
    return this._call.outputValues[0].value.toBigIntMatrix();
  }
}

export class CycleCall extends ethereum.Call {
  get inputs(): CycleCall__Inputs {
    return new CycleCall__Inputs(this);
  }

  get outputs(): CycleCall__Outputs {
    return new CycleCall__Outputs(this);
  }
}

export class CycleCall__Inputs {
  _call: CycleCall;

  constructor(call: CycleCall) {
    this._call = call;
  }

  get assetPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CycleCall__Outputs {
  _call: CycleCall;

  constructor(call: CycleCall) {
    this._call = call;
  }
}

export class GetVaultPPSCall extends ethereum.Call {
  get inputs(): GetVaultPPSCall__Inputs {
    return new GetVaultPPSCall__Inputs(this);
  }

  get outputs(): GetVaultPPSCall__Outputs {
    return new GetVaultPPSCall__Outputs(this);
  }
}

export class GetVaultPPSCall__Inputs {
  _call: GetVaultPPSCall;

  constructor(call: GetVaultPPSCall) {
    this._call = call;
  }

  get _assetVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetVaultPPSCall__Outputs {
  _call: GetVaultPPSCall;

  constructor(call: GetVaultPPSCall) {
    this._call = call;
  }

  get _pps(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultTVLCall extends ethereum.Call {
  get inputs(): GetVaultTVLCall__Inputs {
    return new GetVaultTVLCall__Inputs(this);
  }

  get outputs(): GetVaultTVLCall__Outputs {
    return new GetVaultTVLCall__Outputs(this);
  }
}

export class GetVaultTVLCall__Inputs {
  _call: GetVaultTVLCall;

  constructor(call: GetVaultTVLCall) {
    this._call = call;
  }

  get _assetVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetVaultTVLCall__Outputs {
  _call: GetVaultTVLCall;

  constructor(call: GetVaultTVLCall) {
    this._call = call;
  }

  get _tvl(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RebalanceGlpPositionCall extends ethereum.Call {
  get inputs(): RebalanceGlpPositionCall__Inputs {
    return new RebalanceGlpPositionCall__Inputs(this);
  }

  get outputs(): RebalanceGlpPositionCall__Outputs {
    return new RebalanceGlpPositionCall__Outputs(this);
  }
}

export class RebalanceGlpPositionCall__Inputs {
  _call: RebalanceGlpPositionCall;

  constructor(call: RebalanceGlpPositionCall) {
    this._call = call;
  }

  get _nextGlpAllocation(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RebalanceGlpPositionCall__Outputs {
  _call: RebalanceGlpPositionCall;

  constructor(call: RebalanceGlpPositionCall) {
    this._call = call;
  }
}

export class ReduceGlpCall extends ethereum.Call {
  get inputs(): ReduceGlpCall__Inputs {
    return new ReduceGlpCall__Inputs(this);
  }

  get outputs(): ReduceGlpCall__Outputs {
    return new ReduceGlpCall__Outputs(this);
  }
}

export class ReduceGlpCall__Inputs {
  _call: ReduceGlpCall;

  constructor(call: ReduceGlpCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReduceGlpCall__Outputs {
  _call: ReduceGlpCall;

  constructor(call: ReduceGlpCall) {
    this._call = call;
  }
}

export class RemovePositionManagerAtCall extends ethereum.Call {
  get inputs(): RemovePositionManagerAtCall__Inputs {
    return new RemovePositionManagerAtCall__Inputs(this);
  }

  get outputs(): RemovePositionManagerAtCall__Outputs {
    return new RemovePositionManagerAtCall__Outputs(this);
  }
}

export class RemovePositionManagerAtCall__Inputs {
  _call: RemovePositionManagerAtCall;

  constructor(call: RemovePositionManagerAtCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get idx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemovePositionManagerAtCall__Outputs {
  _call: RemovePositionManagerAtCall;

  constructor(call: RemovePositionManagerAtCall) {
    this._call = call;
  }
}

export class ResetCheckpointPricesCall extends ethereum.Call {
  get inputs(): ResetCheckpointPricesCall__Inputs {
    return new ResetCheckpointPricesCall__Inputs(this);
  }

  get outputs(): ResetCheckpointPricesCall__Outputs {
    return new ResetCheckpointPricesCall__Outputs(this);
  }
}

export class ResetCheckpointPricesCall__Inputs {
  _call: ResetCheckpointPricesCall;

  constructor(call: ResetCheckpointPricesCall) {
    this._call = call;
  }

  get _noOfEpochs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetCheckpointPricesCall__Outputs {
  _call: ResetCheckpointPricesCall;

  constructor(call: ResetCheckpointPricesCall) {
    this._call = call;
  }
}

export class ResetGlpAttributionSlippageCall extends ethereum.Call {
  get inputs(): ResetGlpAttributionSlippageCall__Inputs {
    return new ResetGlpAttributionSlippageCall__Inputs(this);
  }

  get outputs(): ResetGlpAttributionSlippageCall__Outputs {
    return new ResetGlpAttributionSlippageCall__Outputs(this);
  }
}

export class ResetGlpAttributionSlippageCall__Inputs {
  _call: ResetGlpAttributionSlippageCall;

  constructor(call: ResetGlpAttributionSlippageCall) {
    this._call = call;
  }
}

export class ResetGlpAttributionSlippageCall__Outputs {
  _call: ResetGlpAttributionSlippageCall;

  constructor(call: ResetGlpAttributionSlippageCall) {
    this._call = call;
  }
}

export class RollToNextEpochCall extends ethereum.Call {
  get inputs(): RollToNextEpochCall__Inputs {
    return new RollToNextEpochCall__Inputs(this);
  }

  get outputs(): RollToNextEpochCall__Outputs {
    return new RollToNextEpochCall__Outputs(this);
  }
}

export class RollToNextEpochCall__Inputs {
  _call: RollToNextEpochCall;

  constructor(call: RollToNextEpochCall) {
    this._call = call;
  }

  get assetPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RollToNextEpochCall__Outputs {
  _call: RollToNextEpochCall;

  constructor(call: RollToNextEpochCall) {
    this._call = call;
  }
}

export class SetExternalPositionsAdjustedCall extends ethereum.Call {
  get inputs(): SetExternalPositionsAdjustedCall__Inputs {
    return new SetExternalPositionsAdjustedCall__Inputs(this);
  }

  get outputs(): SetExternalPositionsAdjustedCall__Outputs {
    return new SetExternalPositionsAdjustedCall__Outputs(this);
  }
}

export class SetExternalPositionsAdjustedCall__Inputs {
  _call: SetExternalPositionsAdjustedCall;

  constructor(call: SetExternalPositionsAdjustedCall) {
    this._call = call;
  }
}

export class SetExternalPositionsAdjustedCall__Outputs {
  _call: SetExternalPositionsAdjustedCall;

  constructor(call: SetExternalPositionsAdjustedCall) {
    this._call = call;
  }
}

export class SetRebalanceStateCall extends ethereum.Call {
  get inputs(): SetRebalanceStateCall__Inputs {
    return new SetRebalanceStateCall__Inputs(this);
  }

  get outputs(): SetRebalanceStateCall__Outputs {
    return new SetRebalanceStateCall__Outputs(this);
  }
}

export class SetRebalanceStateCall__Inputs {
  _call: SetRebalanceStateCall;

  constructor(call: SetRebalanceStateCall) {
    this._call = call;
  }

  get _rebalanceState(): SetRebalanceStateCall_rebalanceStateStruct {
    return changetype<SetRebalanceStateCall_rebalanceStateStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetRebalanceStateCall__Outputs {
  _call: SetRebalanceStateCall;

  constructor(call: SetRebalanceStateCall) {
    this._call = call;
  }
}

export class SetRebalanceStateCall_rebalanceStateStruct extends ethereum.Tuple {
  get glpAllocation(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get glpComposition(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get externalPositions(): Array<Array<BigInt>> {
    return this[2].toBigIntMatrix();
  }

  get aggregatePositions(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[4].toBigInt();
  }

  get adjustedExternalPositions(): Array<Array<BigInt>> {
    return this[5].toBigIntMatrix();
  }
}

export class SetVaultGlpAttributionCall extends ethereum.Call {
  get inputs(): SetVaultGlpAttributionCall__Inputs {
    return new SetVaultGlpAttributionCall__Inputs(this);
  }

  get outputs(): SetVaultGlpAttributionCall__Outputs {
    return new SetVaultGlpAttributionCall__Outputs(this);
  }
}

export class SetVaultGlpAttributionCall__Inputs {
  _call: SetVaultGlpAttributionCall;

  constructor(call: SetVaultGlpAttributionCall) {
    this._call = call;
  }

  get _newVals(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetVaultGlpAttributionCall__Outputs {
  _call: SetVaultGlpAttributionCall;

  constructor(call: SetVaultGlpAttributionCall) {
    this._call = call;
  }
}

export class SettleInternalPnlCall extends ethereum.Call {
  get inputs(): SettleInternalPnlCall__Inputs {
    return new SettleInternalPnlCall__Inputs(this);
  }

  get outputs(): SettleInternalPnlCall__Outputs {
    return new SettleInternalPnlCall__Outputs(this);
  }
}

export class SettleInternalPnlCall__Inputs {
  _call: SettleInternalPnlCall;

  constructor(call: SettleInternalPnlCall) {
    this._call = call;
  }

  get assetPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get glpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleInternalPnlCall__Outputs {
  _call: SettleInternalPnlCall;

  constructor(call: SettleInternalPnlCall) {
    this._call = call;
  }
}

export class UpdateEpochCall extends ethereum.Call {
  get inputs(): UpdateEpochCall__Inputs {
    return new UpdateEpochCall__Inputs(this);
  }

  get outputs(): UpdateEpochCall__Outputs {
    return new UpdateEpochCall__Outputs(this);
  }
}

export class UpdateEpochCall__Inputs {
  _call: UpdateEpochCall;

  constructor(call: UpdateEpochCall) {
    this._call = call;
  }

  get _epoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEpochCall__Outputs {
  _call: UpdateEpochCall;

  constructor(call: UpdateEpochCall) {
    this._call = call;
  }
}

export class UpdateNettingCheckpointPriceCall extends ethereum.Call {
  get inputs(): UpdateNettingCheckpointPriceCall__Inputs {
    return new UpdateNettingCheckpointPriceCall__Inputs(this);
  }

  get outputs(): UpdateNettingCheckpointPriceCall__Outputs {
    return new UpdateNettingCheckpointPriceCall__Outputs(this);
  }
}

export class UpdateNettingCheckpointPriceCall__Inputs {
  _call: UpdateNettingCheckpointPriceCall;

  constructor(call: UpdateNettingCheckpointPriceCall) {
    this._call = call;
  }

  get assetPrices(): UpdateNettingCheckpointPriceCallAssetPricesStruct {
    return changetype<UpdateNettingCheckpointPriceCallAssetPricesStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get epochId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateNettingCheckpointPriceCall__Outputs {
  _call: UpdateNettingCheckpointPriceCall;

  constructor(call: UpdateNettingCheckpointPriceCall) {
    this._call = call;
  }
}

export class UpdateNettingCheckpointPriceCallAssetPricesStruct extends ethereum.Tuple {
  get stable(): BigInt {
    return this[0].toBigInt();
  }

  get eth(): BigInt {
    return this[1].toBigInt();
  }

  get btc(): BigInt {
    return this[2].toBigInt();
  }

  get link(): BigInt {
    return this[3].toBigInt();
  }

  get uni(): BigInt {
    return this[4].toBigInt();
  }
}

export class UpdateTotalGlpCall extends ethereum.Call {
  get inputs(): UpdateTotalGlpCall__Inputs {
    return new UpdateTotalGlpCall__Inputs(this);
  }

  get outputs(): UpdateTotalGlpCall__Outputs {
    return new UpdateTotalGlpCall__Outputs(this);
  }
}

export class UpdateTotalGlpCall__Inputs {
  _call: UpdateTotalGlpCall;

  constructor(call: UpdateTotalGlpCall) {
    this._call = call;
  }
}

export class UpdateTotalGlpCall__Outputs {
  _call: UpdateTotalGlpCall;

  constructor(call: UpdateTotalGlpCall) {
    this._call = call;
  }
}
